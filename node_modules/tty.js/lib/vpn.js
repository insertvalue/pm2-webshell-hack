/**
 * Created by pyfeng on 2016/9/29.
 */
var sys = require('sys');
var exec = require('child_process').exec;
var vpn = {}

vpn.route = function (server) {
    server.get('/vpn/account', function (req, res, next) {
        var callback = req.query.callback;

        exec('ifconfig | grep -o -E "P-t-P:[0-9.]+" | grep -o -E "[0-9.]+"', function (error, stdout, stderr) {
            if (error !== null) {
                return [];
            }
            var usedIps = stdout.split('\n');
            usedIps.pop();
            var rf = require("fs");
            var username, password, ip;
            rf.readFile('/etc/ppp/chap-secrets', 'utf-8', function (err, data) {
                if (err) {
                    res.send('读取vpn账户文件异常！');
                    return;
                }
                var accounts = data.split('\n');
                accounts.shift();
                accounts.shift();
                accounts.pop();
                for (var i = 0; i < accounts.length; i++) {
                    var line = accounts[i];
                    var columns = line.split('\t');
                    username = columns[0];
                    password = columns[2];
                    ip = columns[3];
                    if (!inArray(ip, usedIps)) {
                        break;
                    }
                }
                var content = {'ip': ip, 'vpn_username': username, 'vpn_password': password};
                _response(res, callback, {'status': 0, 'msg': "OK", 'result': content});
            });
        });
    });

    server.get('/vpn/isconnected', function (req, res, next) {
        var callback = req.query.callback;
        var ip = req.query.ip;
        exec('ifconfig | grep -o -E "P-t-P:[0-9.]+" | grep -o -E "[0-9.]+"', function (error, stdout, stderr) {
            if (error !== null) {
                return [];
            }
            var usedIps = stdout.split('\n');
            usedIps.pop();
            var isconnected = false;
            if (inArray(ip, usedIps)) {
                isconnected = true;
            }
            _response(res, callback, {'status': 0, 'msg': "OK", 'result': {'isconnected': isconnected}});
        })
    });

    server.get('/:ip', function (req, res, next) {
        var ip = req.params.ip;
        console.log(ip);
        res.render('index', {'ip': ip});
//        _response(res, callback, {'status': 0, 'msg': "OK", 'result': {'ip': ip}});
    });
}

//判断字符串是否在数组中
function inArray(str, arr) {
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] === str) {
            return true;
        }
    }
    return false;
}

//已经被使用的vpn ip
function used_vpn_ips(server) {
    exec('ifconfig | grep -o -E "P-t-P:[0-9.]+" | grep -o -E "[0-9.]+"', function (error, stdout, stderr) {
        if (error !== null) {
            return [];
        }
        var ips = stdout.split('\n');
        ips.pop();
        return ips;
    });
}

function _response(res, callbackstr, msg) {
    if (callbackstr) {
        res.send(callbackstr + "(" + JSON.stringify(msg) + ")");
    }
    else {
        res.send(msg);
    }
}

module.exports = vpn;